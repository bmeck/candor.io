print = global.print
Tcp = global.uv.Tcp

// Simple pretty printer
dump(value) {
  type = typeof value
  if (type == "nil") {
    return "nil"
  }
  if (type == "boolean" || type == "number") {
    return "" + value
  }
  if (type == "string") {
    return '"' + value + '"'
  }
  if (type == "object") {
    keys = keysof value
    length = sizeof keys
    i = 0
    escaped = "{ "
    while (i < length) {
      key = keys[i]
      part = dump(value[key])
      escaped = escaped + key + ": " + part
      if (i < length - 1) {
        escaped = escaped + ", "
      }
      i++
    }
    return escaped + " }"
  }
  if (type == "array") {
    length = sizeof value
    i = 0
    escaped = "[ "
    while (i < length) {
      escaped = escaped + dump(value[i])
      print(escaped)
      if (i < length - 1) {
        escaped = escaped + ", "
      }
      i++
    }
    return escaped + " ]"
  }
  return "[" + type + "]"
}

// Quick and dirty pretty printer
p(label, value) {
  print(label, dump(value))
}

// Used to emit on errors when libuv badness happens
check(status) {
  if (status) {
    err = global.uv.lastError()
    print(err.name + ": " + err.error)
    global.exit()
  }
}

p("Tcp", Tcp)

server = Tcp.create()
check(Tcp.bind(server, "0.0.0.0", 8080))
if (err) print(err)
Tcp.listen(server, 128, () {
  client = Tcp.create()
  Tcp.accept(server, client)
  print("on connection")
  p("sockname", Tcp.getsockname(client))
  p("peername", Tcp.getpeername(client))
  Tcp.readStart(client, (chunk) {
    p("onChunk", chunk)
    Tcp.write(client, chunk)
  })
})

